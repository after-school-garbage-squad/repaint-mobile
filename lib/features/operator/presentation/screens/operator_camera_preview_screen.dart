import 'dart:io';import 'package:auto_route/auto_route.dart';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:repaint_mobile/config/providers.dart';import 'package:repaint_mobile/features/common/presentation/widgets/app_dialog.dart';import 'package:repaint_mobile/features/common/presentation/widgets/bottom_constrained_padding.dart';import 'package:repaint_mobile/features/common/presentation/widgets/material_banner.dart';import 'package:repaint_mobile/features/common/presentation/widgets/repaint_scaffold.dart';import 'package:repaint_mobile/features/common/presentation/widgets/snackbar.dart';import 'package:repaint_mobile/features/common/presentation/widgets/wide_elevated_button.dart';import 'package:repaint_mobile/features/operator/providers/providers.dart';@RoutePage()class OperatorCameraPreviewScreen extends ConsumerWidget {  const OperatorCameraPreviewScreen({@queryParam this.imagePath});  final String? imagePath;  @override  Widget build(BuildContext context, WidgetRef ref) {    final controller = ref.watch(operatorCameraPreviewControllerProvider);    ref.listen(      networkErrorProvider,      (previous, next) => showNetworkErrorSnackBar(context, next),    );    ref.listen(      bluetoothServiceProvider,      (previous, next) => showBluetoothErrorMaterialBanner(        context,        previous?.value,        next.value,      ),    );    ref.listen(      locationServiceProvider,      (previous, next) => showLocationErrorMaterialBanner(        context,        previous?.value,        next.value,      ),    );    return RepaintScaffold(      isBackButtonVisible: false,      title: "確認画面",      child: Padding(        padding: const EdgeInsets.fromLTRB(16.0, 32.0, 16.0, 0.0),        child: Column(          children: [            if (imagePath != null)              ClipRRect(                borderRadius: BorderRadius.circular(16.0),                child: Image.file(File(imagePath!)),              )            else              const Center(child: CircularProgressIndicator()),            const SizedBox(height: 16.0),            Row(              children: [                Expanded(                  child: WideElevatedButton(                    onPressed: () => controller.onCancelPressed(context),                    text: "キャンセル",                    colors: const WideElevatedButtonColors(                      backgroundColor: Colors.white,                      textColor: Colors.red,                    ),                  ),                ),                const SizedBox(width: 32.0),                Expanded(                  child: WideElevatedButton(                    onPressed: () async =>                        controller.onRegisterPressed(context, imagePath),                    text: "登録する",                  ),                ),              ],            ),            const BottomPadding(),          ],        ),      ),    );  }}class PictureRegisteredDialog extends StatelessWidget {  const PictureRegisteredDialog({required this.onPressed});  final void Function() onPressed;  @override  Widget build(BuildContext context) {    return AppDialog(      automaticallyImplyLeading: false,      children: [        const Expanded(child: Center(child: Text("登録しました！"))),        WideElevatedButton(          onPressed: onPressed,          text: "写真撮影に戻る",        ),      ],    );  }}